#!/usr/bin/env php
<?php

require __DIR__ . '/Packages/saeghe/cli/Source/IO/Read.php';
require __DIR__ . '/Packages/saeghe/cli/Source/IO/Write.php';
require __DIR__ . '/Source/Commands/Add.php';
require __DIR__ . '/Source/Commands/Build.php';
require __DIR__ . '/Source/Commands/Help.php';
require __DIR__ . '/Source/Commands/Initialize.php';
require __DIR__ . '/Source/Commands/Install.php';
require __DIR__ . '/Source/Commands/Migrate.php';
require __DIR__ . '/Source/Commands/Remove.php';
require __DIR__ . '/Source/Commands/Update.php';

use Saeghe\Cli\IO\Read;

const DEFAULT_CONFIG_FILENAME = 'saeghe.config.json';

$config = [
    'map' => [],
    'entry-points' => [],
    'executables' => [],
    'packages-directory' => Read\argument('packages-directory', 'Packages'),
    'packages' => [],
];

$meta = ['packages' => []];

$credentials = json_decode(json: file_get_contents(__DIR__ . '/credentials.json'), associative: true, flags: JSON_THROW_ON_ERROR);

$project = Read\argument('project', '');
$configFile = Read\argument('config-file', DEFAULT_CONFIG_FILENAME);

$projectRoot = strlen($project) ? $_SERVER['PWD'] . '/' . $project . '/' : $_SERVER['PWD'] . '/';

$configPath = $projectRoot . $configFile;
$config = array_merge(
    $config,
    file_exists($configPath) ? json_decode(json: file_get_contents($configPath), associative: true, flags: JSON_THROW_ON_ERROR) : []
);

$metaFilePath = str_replace('.json', '-lock.json', $configPath);
$meta = array_merge(
    $meta,
    file_exists($metaFilePath) ? json_decode(json: file_get_contents($metaFilePath), associative: true, flags: JSON_THROW_ON_ERROR) : []
);

$packagesDirectory = dir_find_or_create($projectRoot . $config['packages-directory'] . '/');

$command = Read\argument('command', 'help');

match ($command) {
    'add' => \Saeghe\Saeghe\Commands\Add\run(),
    'build' => \Saeghe\Saeghe\Commands\Build\run(),
    'initialize' => \Saeghe\Saeghe\Commands\Initialize\run(),
    'install' => \Saeghe\Saeghe\Commands\Install\run(),
    'migrate' => \Saeghe\Saeghe\Commands\Migrate\run(),
    'remove' => \Saeghe\Saeghe\Commands\Remove\run(),
    'update' => \Saeghe\Saeghe\Commands\Update\run(),
    default => \Saeghe\Saeghe\Commands\Help\run(),
};

function dir_find_or_create($path)
{
    if (! file_exists($path)) {
        mkdir($path);
    }

    return $path;
}

function dir_preserve_copy($origin, $destination)
{
    return mkdir($destination, fileperms($origin) & 0x0FFF);
}

function dir_make_recursive($path)
{
    return mkdir($path, 0755, true);
}

function dir_delete_recursive($path)
{
    shell_exec("rm -fR $path");
}

function file_preserve_modify($origin, $destination, $content)
{
    file_put_contents($destination, $content);
    chmod($destination, fileperms($origin) & 0x0FFF);
}

function json_put($path, array $content)
{
    file_put_contents($path, json_encode($content, JSON_PRETTY_PRINT) . PHP_EOL);
}

function json_merge($path, array $content)
{
    $currentContent = json_to_array($path);
    $content = array_merge_recursive($currentContent, $content);

    json_put($path, $content);
}

function json_to_array($path, $default = [])
{
    if (file_exists($path)) {
        return json_decode(json: file_get_contents($path), associative: true, flags: JSON_THROW_ON_ERROR);
    }

    return $default;
}

function git_clone($packageDirectory, $owner, $repo)
{
    $destination = "$packageDirectory$owner/$repo";

    shell_exec("rm -fR $destination");
    shell_exec("git clone git@github.com:$owner/$repo.git $destination");

    return trim(shell_exec("git --git-dir=$destination/.git rev-parse HEAD"));
}

function git_has_release($owner, $repo)
{
    global $credentials;

    $output = shell_exec('curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ' . $credentials['github.com']['token'] . '" ' .  "https://api.github.com/repos/$owner/$repo/releases/latest | grep 'tag_name'");

    return ! is_null($output);
}

function git_latest_version($owner, $repo)
{
    global $credentials;

    $output = shell_exec('curl -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ' . $credentials['github.com']['token'] . '" ' .  "https://api.github.com/repos/$owner/$repo/releases/latest | grep 'tag_name'");
    $version = str_replace('"tag_name": "', '', $output);

    return trim(explode('"', $version)[0]);
}

function git_download($packageDirectory, $owner, $repo, $version)
{
    global $credentials;

    $ownerDirectory = $packageDirectory . $owner . '/';

    if (! file_exists($ownerDirectory)) {
        mkdir($ownerDirectory);
    }

    $zipFile = $ownerDirectory . $repo . '.zip';

    $token = $credentials['github.com']['token'];
    $fp = fopen ($zipFile, 'w+');
    $ch = curl_init("https://github.com/$owner/$repo/zipball/$version");
    curl_setopt($ch, CURLOPT_TIMEOUT, 600);
    curl_setopt($ch, CURLOPT_FILE, $fp);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, ["Authorization: Bearer $token"]);
    curl_exec($ch);
    curl_close($ch);
    fclose($fp);

    $zip = new ZipArchive;
    $res = $zip->open($zipFile);

    if ($res === TRUE) {
        $zip->extractTo($ownerDirectory);
        $zip->close();
    } else {
        var_dump($res);
    }

    shell_exec('rm -f ' . $zipFile);

    $files = scandir($ownerDirectory);

    $directory = array_reduce($files, function ($carry, $filename) use ($owner, $repo) {
        return str_starts_with($filename, "$owner-$repo-") ? $filename : $carry;
    });

    rename($ownerDirectory . $directory, $ownerDirectory . $repo);

    return trim(str_replace("$owner-$repo-", '', $directory));
}

function git_repo($package)
{
    if (str_starts_with($package, 'git@')) {
        $ownerAndRepo = str_replace('git@github.com:', '', $package);
    } else {
        $ownerAndRepo = str_replace('https://github.com/', '', $package);
    }

    if (str_ends_with($ownerAndRepo, '.git')) {
        $ownerAndRepo = substr_replace($ownerAndRepo, '', -4);
    }

    return explode('/', $ownerAndRepo)[1];
}

function git_owner($package)
{
    if (str_starts_with($package, 'git@')) {
        $ownerAndRepo = str_replace('git@github.com:', '', $package);
    } else {
        $ownerAndRepo = str_replace('https://github.com/', '', $package);
    }

    if (str_ends_with($ownerAndRepo, '.git')) {
        $ownerAndRepo = substr_replace($ownerAndRepo, '', -4);
    }

    return explode('/', $ownerAndRepo)[0];
}

function all_files_and_directories($origin)
{
    $filesAndDirectories = scandir($origin);

    return array_filter($filesAndDirectories, fn ($fileOrDirectory) => ! in_array($fileOrDirectory, ['.', '..']));
}

function read_lines(string $source): Generator
{
    $fileHandler = @fopen($source, "r");

    if ($fileHandler) {
        while (($line = fgets($fileHandler)) !== false) {
            yield $line;
        }
        if (!feof($fileHandler)) {
            var_dump("Error: unexpected fgets() fail");
        }
        fclose($fileHandler);
    }
}

function intact_copy($origin, $destination)
{
    copy($origin, $destination);
    chmod($destination, fileperms($origin) & 0x0FFF);
}

function string_between($string, $start, $end)
{
    $startPosition = stripos($string, $start);
    $first = substr($string, $startPosition);
    $second = substr($first, strlen($start));
    $positionEnd = stripos($second, $end);
    $final = substr($second, 0, $positionEnd);

    return trim($final);
}

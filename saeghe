#!/usr/bin/env php
<?php

require \realpath(__DIR__ . '/Import.php');
require \realpath(__DIR__ . '/Source/Commands/Add.php');
require \realpath(__DIR__ . '/Source/Commands/Build.php');
require \realpath(__DIR__ . '/Source/Commands/Credential.php');
require \realpath(__DIR__ . '/Source/Commands/Flush.php');
require \realpath(__DIR__ . '/Source/Commands/Help.php');
require \realpath(__DIR__ . '/Source/Commands/Init.php');
require \realpath(__DIR__ . '/Source/Commands/Install.php');
require \realpath(__DIR__ . '/Source/Commands/Man.php');
require \realpath(__DIR__ . '/Source/Commands/Migrate.php');
require \realpath(__DIR__ . '/Source/Commands/Remove.php');
require \realpath(__DIR__ . '/Source/Commands/Update.php');
require \realpath(__DIR__ . '/Source/Commands/Version.php');
require \realpath(__DIR__ . '/Source/Commands/Watch.php');

use Saeghe\Cli\IO\Read;
use Saeghe\Exception\CredentialCanNotBeSetException;
use Saeghe\Saeghe\FileManager\Filesystem\Directory;
use Saeghe\Saeghe\FileManager\Filesystem\File;
use Saeghe\Saeghe\Git\Exception\InvalidTokenException;
use Saeghe\Saeghe\Project;
use function Saeghe\Cli\IO\Write\error;

$command = Read\command() ?? Read\parameter('command');

if (is_null($command)) {
    $command = Read\option('v') || Read\option('version') ? 'version' : (Read\option('man') ? 'man' : 'help');
}

$project = Read\parameter('project', '');

$project = makeProject(
    strlen($project) ? getcwd() . '/' . $project . '/' : getcwd() . '/',
    $command === 'build' ? Read\argument(2, 'development') : 'development'
);

set_exception_handler(function (\Throwable $exception) {
    if ($exception instanceof InvalidTokenException) {
        error('The GitHub token is not valid. Either, you didn\'t set one yet, or it is not valid. Please use the `credential` command to set a valid token.');
    }

    if ($exception instanceof CredentialCanNotBeSetException) {
        error($exception->getMessage());
    }
});

match ($command) {
    'add' => \Saeghe\Saeghe\Commands\Add\run($project),
    'build' => \Saeghe\Saeghe\Commands\Build\run($project),
    'credential' => \Saeghe\Saeghe\Commands\Credential\run($project),
    'flush' => \Saeghe\Saeghe\Commands\Flush\run($project),
    'init' => \Saeghe\Saeghe\Commands\Init\run($project),
    'install' => \Saeghe\Saeghe\Commands\Install\run($project),
    'man' => \Saeghe\Saeghe\Commands\Man\run($project),
    'migrate' => \Saeghe\Saeghe\Commands\Migrate\run($project),
    'remove' => \Saeghe\Saeghe\Commands\Remove\run($project),
    'update' => \Saeghe\Saeghe\Commands\Update\run($project),
    'version' => \Saeghe\Saeghe\Commands\Version\run($project),
    'watch' => \Saeghe\Saeghe\Commands\Watch\run($project),
    default => \Saeghe\Saeghe\Commands\Help\run($project),
};

function makeProject($projectRoot, $environment): Project
{
    return new Project(
        root: new Directory($projectRoot),
        environment: $environment,
        config: new File($projectRoot . 'saeghe.config.json'),
        config_lock: new File($projectRoot . 'saeghe.config-lock.json'),
        credentials: new File(__DIR__ .'/credentials.json'),
    );
}

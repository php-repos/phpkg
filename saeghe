#!/usr/bin/env php
<?php

require realpath(__DIR__ . '/Import.php');
require realpath(__DIR__ . '/Source/Commands/Add.php');
require realpath(__DIR__ . '/Source/Commands/Alias.php');
require realpath(__DIR__ . '/Source/Commands/Build.php');
require realpath(__DIR__ . '/Source/Commands/Credential.php');
require realpath(__DIR__ . '/Source/Commands/Flush.php');
require realpath(__DIR__ . '/Source/Commands/Help.php');
require realpath(__DIR__ . '/Source/Commands/Init.php');
require realpath(__DIR__ . '/Source/Commands/Install.php');
require realpath(__DIR__ . '/Source/Commands/Man.php');
require realpath(__DIR__ . '/Source/Commands/Migrate.php');
require realpath(__DIR__ . '/Source/Commands/Remove.php');
require realpath(__DIR__ . '/Source/Commands/Update.php');
require realpath(__DIR__ . '/Source/Commands/Version.php');
require realpath(__DIR__ . '/Source/Commands/Watch.php');

use Saeghe\Cli\IO\Read;
use Saeghe\FileManager\Filesystem\Directory;
use Saeghe\FileManager\FileType\Json;
use Saeghe\Saeghe\Classes\Credential\Credential;
use Saeghe\Saeghe\Classes\Credential\Credentials;
use Saeghe\Saeghe\Classes\Environment\Environment;
use Saeghe\Saeghe\Exception\CredentialCanNotBeSetException;
use function Saeghe\Saeghe\Exception\register_exception_handler;
use function Saeghe\Saeghe\Providers\GitHub\github_token;
use const Saeghe\Saeghe\Providers\GitHub\GITHUB_DOMAIN;

register_exception_handler();

$command = Read\command() ?? Read\parameter('command');

if (is_null($command)) {
    $command = Read\option('v') || Read\option('version') ? 'version' : (Read\option('man') ? 'man' : 'help');
}

$environment = new Environment(Directory::from_string(__DIR__));

match ($command) {
    'add' => \Saeghe\Saeghe\Commands\Add\run($environment),
    'alias' => \Saeghe\Saeghe\Commands\Alias\run($environment),
    'build' => \Saeghe\Saeghe\Commands\Build\run($environment),
    'credential' => \Saeghe\Saeghe\Commands\Credential\run($environment),
    'flush' => \Saeghe\Saeghe\Commands\Flush\run($environment),
    'init' => \Saeghe\Saeghe\Commands\Init\run($environment),
    'install' => \Saeghe\Saeghe\Commands\Install\run($environment),
    'man' => \Saeghe\Saeghe\Commands\Man\run(),
    'migrate' => \Saeghe\Saeghe\Commands\Migrate\run($environment),
    'remove' => \Saeghe\Saeghe\Commands\Remove\run($environment),
    'update' => \Saeghe\Saeghe\Commands\Update\run($environment),
    'version' => \Saeghe\Saeghe\Commands\Version\run(),
    'watch' => \Saeghe\Saeghe\Commands\Watch\run(),
    default => \Saeghe\Saeghe\Commands\Help\run(),
};

function set_credentials(Environment $environment): void
{
    $environment_token = github_token();

    if (strlen($environment_token) > 0) {
        return;
    }

    if (! $environment->credential_file->path->exists()) {
        throw new CredentialCanNotBeSetException('There is no credential file. Please use the `credential` command to add your token.');
    }

    /** @var Credential $github_credential */
    $github_credential = Credentials::from_array(Json\to_array($environment->credential_file->path))
        ->first(fn (Credential $credential) => $credential->provider() === GITHUB_DOMAIN);

    github_token(is_null($github_credential) ? '' : $github_credential->token());
}

function when(bool $condition, Closure $then, Closure $otherwise = null): mixed
{
    return $condition ? $then() : (is_null($otherwise) ? null : $otherwise());
}

function unless(bool $condition, Closure $then, Closure $otherwise = null): mixed
{
    return when(! $condition, $then, $otherwise);
}

function pipe(mixed $value, Closure $closure): mixed
{
    return is_callable($value) ? $closure($value()) : $closure($value);
}

function when_exists(mixed $value, Closure $then, Closure $otherwise = null): mixed
{
    return pipe($value, is_null($value) ? (is_null($otherwise) ? fn () => null : $otherwise) : $then);
}
